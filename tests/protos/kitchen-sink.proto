// Proto file that tries to exercise all valid proto features.

/**
 * Both comment types should be supported and ignore other tokens such as message FooBar { }.
 */

syntax = "proto2";

package some_package;

import "protos/options.proto";
import "protos/otherOptions.proto";
import "protos/common.proto";
import "google/protobuf/descriptor.proto";

option (file_level_option) = "string value";
option (another_option) = "Just \"testing\" that strings parse.";
option (options) = {
  package_name: "some.options"
  flat_package: true
};

option (repeated_message_options) = {
  package_name: "one_option"
  flat_package: true
};

option (repeated_message_options) = {
  package_name: "another"
  flat_package: false
};

option (surrogate_a) = {
  base_uri: "/some/:uri"
  mapped: ["url"]
};

option (surrogate_b) = {
  base_uri: "/some/:uri/:model"
  mapped: ["url", "entity"]
};

option (repeated_string_option) = "hello";
option (repeated_string_option) = "world";

message ThisIsTheKitchenSink {
  required string required_field = 1;
  optional int32 optional_field = 2;
  repeated bool repeated_field = 3;
  // Skip 4, just as a test.
  optional AnotherMessage using_another_message = 5;

  optional int32 negative_field = 6 [default=-1];
  optional string string_field = 7 [default='string'];
  optional examples.Color color_field = 8;

  oneof oneof_name {
    int32 oneof_field_normal = 9;
    string oneof_field_with_option = 10 [default='string'];
    examples.Color oneof_color_field = 11;
  }

  optional bool sherlock_lives_at_221b = 12;
  optional bool call_867_5309 = 13;
  optional string other_field_option = 14 [(other.field).field_name='special'];

  reserved 20230619100;
  reserved 20230619200, 20230619300 to 20230619400;
  reserved "this_is_reserved";
  reserved "this_too_is_reserved", "this_also_is_reserved";
}


message AnotherMessage {
  option (message_level_option) = "XYZ";
  required int64 id = 1000 [(option)=1, (something_else)="foobar"];
  optional string x = 1; optional string y = 2; optional string z = 3;

  message MessagesWithinMessages {
    required bool done = 1;

    enum EnumInsideMessageInsideMessage {
      YES = 1;
      NO = 2;
    }
  }
}


service WhatTheSinkCanDo {
  option (service_level_option) = "serviceOption";

  rpc DisposeLoudly (ThisIsTheKitchenSink) returns (examples.Color) {
    option (method_option) = "gargle";
    option (number_method_option) = 60;
  }

  rpc RinseQuietly (ThisIsTheKitchenSink) returns (examples.Color) {
    option (method_option) = "shhhhh";
  }

  rpc HoldDishes (ThisIsTheKitchenSink) returns (examples.Color);
}

extend google.protobuf.MessageOptions {
  optional string message_type = 50004;
}


enum FooBar {
  FIRST = 1;
  SECOND = 2;
  THIRD = 3;
}
